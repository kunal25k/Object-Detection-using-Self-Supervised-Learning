import math
import sys
import time
import torch

import torchvision.models.detection.mask_rcnn

from coco_utils import get_coco_api_from_dataset
from coco_eval import CocoEvaluator
import utils
import matplotlib.pyplot as plt


def train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq):
    model.train()
    metric_logger = utils.MetricLogger(delimiter="  ")
    metric_logger.add_meter('lr', utils.SmoothedValue(window_size=1, fmt='{value:.6f}'))
    header = 'Epoch: [{}]'.format(epoch)

    lr_scheduler = None
    if epoch == 0:
        warmup_factor = 1. / 1000
        warmup_iters = min(1000, len(data_loader) - 1)

        lr_scheduler = utils.warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor)

    for images, targets in metric_logger.log_every(data_loader, print_freq, header):
        #print("during training 1" )
        #print(images[0])
        images = list(image.to(device) for image in images)
        #print("during training 2")
        #print(images[0])
        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]
        #print("during trianing 3" )
        #print(images)
        #print(targets)
        loss_dict = model(images, targets)
        
        losses = sum(loss for loss in loss_dict.values())

        # reduce losses over all GPUs for logging purposes
        loss_dict_reduced = utils.reduce_dict(loss_dict)
        losses_reduced = sum(loss for loss in loss_dict_reduced.values())

        loss_value = losses_reduced.item()

        if not math.isfinite(loss_value):
            print("Loss is {}, stopping training".format(loss_value))
            print(loss_dict_reduced)
            sys.exit(1)

        optimizer.zero_grad()
        losses.backward()
        optimizer.step()

        if lr_scheduler is not None:
            lr_scheduler.step()

        metric_logger.update(loss=losses_reduced, **loss_dict_reduced)
        metric_logger.update(lr=optimizer.param_groups[0]["lr"])

    return metric_logger


def _get_iou_types(model):
    model_without_ddp = model
    if isinstance(model, torch.nn.parallel.DistributedDataParallel):
        model_without_ddp = model.module
    iou_types = ["bbox"]
    if isinstance(model_without_ddp, torchvision.models.detection.MaskRCNN):
        iou_types.append("segm")
    if isinstance(model_without_ddp, torchvision.models.detection.KeypointRCNN):
        iou_types.append("keypoints")
    return iou_types


@torch.no_grad()
def evaluate(model, data_loader, device):
    n_threads = torch.get_num_threads()
    # FIXME remove this and make paste_masks_in_image run on the GPU
    torch.set_num_threads(1)
    cpu_device = torch.device("cpu")
    model.eval()
    metric_logger = utils.MetricLogger(delimiter="  ")
    header = 'Test:'

    coco = get_coco_api_from_dataset(data_loader.dataset)
    iou_types = _get_iou_types(model)
    coco_evaluator = CocoEvaluator(coco, iou_types)

    for images, targets in metric_logger.log_every(data_loader, 100, header):
        images = list(img.to(device) for img in images)

        torch.cuda.synchronize()
        model_time = time.time()
        #print("inside validation")
        print("just before seding to the model image" )
        print(images)
        outputs = model(images)

        outputs = [{k: v.to(cpu_device) for k, v in t.items()} for t in outputs]
        model_time = time.time() - model_time

        res = {target["image_id"].item(): output for target, output in zip(targets, outputs)}
        evaluator_time = time.time()
        coco_evaluator.update(res)
        evaluator_time = time.time() - evaluator_time
        metric_logger.update(model_time=model_time, evaluator_time=evaluator_time)

    # gather the stats from all processes
    metric_logger.synchronize_between_processes()
    print("Averaged stats:", metric_logger)
    coco_evaluator.synchronize_between_processes()

    # accumulate predictions from all images
    coco_evaluator.accumulate()
    coco_evaluator.summarize()
    torch.set_num_threads(n_threads)
    return coco_evaluator

@torch.no_grad()
def return_boundingbox(model, data_loader, device):
    n_threads = torch.get_num_threads()
    # FIXME remove this and make paste_masks_in_image run on the GPU
    torch.set_num_threads(1)
    cpu_device = torch.device("cpu")
    model.eval()
    metric_logger = utils.MetricLogger(delimiter="  ")
    header = 'Test:'

    # coco = get_coco_api_from_dataset(data_loader.dataset)
    # iou_types = _get_iou_types(model)
    # coco_evaluator = CocoEvaluator(coco, iou_types)

    all_outputs = [];
    count = 0
    
#     check = data_loader;
#     print("full metric logger print" )
#     print(check)
#     print("end of metric logge print")
    for images in metric_logger.log_every(data_loader, 100, header):
        all_img = []
    #for images in data_loader:
        #img is a tuple here
        print("entering here in returningboundingbox" )
        for img in images:
             x = torch.stack(list(img), dim=0)
             #print(x)
             #print(x.shape)
                
             #torch.cat(images, dim=0)
             all_img.append(x)
        #all_img_h = torch.FloatTensor(all_img)
        #print(all_img)
        final_all_img = torch.stack(all_img)
        #print(type(all_img))
        #print(all_img)
        final_all_img = torch.permute(final_all_img, (1,0,2,3))
        #print(all_img.shape)
        #print(all_img)
        #all_img = torch.cat(list(torch.stack(list(img), dim=0).to(device) for img in images), dim=-1)
        #print(all_img)
        
             #myimage = torch.permute(torch.stack(list(img), dim=0).to(device), (1, 0, 2, 3))
             #print(myimage)
            
        #images = list(torch.stack(list(img), dim=0).to(device) for img in images)
        
        #print(images)
        #torch.cuda.synchronize()
        
#         for xx in images[1]:
#              print(xx.shape)
        #print(images[0][1].shape)
        #print(images[0][1])
        #print("images[0]")
        #print(images[1].shape)
        #print(images[1])
        #print("full")
        #print(images)
        #print(targets)
        
#         images = list(img.to(device) for img in images)

#         torch.cuda.synchronize()
#         model_time = time.time()
        outputs = model(final_all_img)
        print(outputs)
        count = count+1
        if count==3:
            break

        #outputs = [{k: v.to(cpu_device) for k, v in t.items()} for t in outputs]
        all_outputs.append(outputs)
        #model_time = time.time() - model_time
        
    print(all_outputs)

    return all_outputs

